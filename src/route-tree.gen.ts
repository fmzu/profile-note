/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as SlugRouteImport } from './routes/slug'
import { Route as ErrorRouteImport } from './routes/error'
import { Route as CanvasRouteImport } from './routes/canvas'
import { Route as BoardRouteImport } from './routes/board'
import { Route as ApiRouteImport } from './routes/api'
import { Route as IndexRouteImport } from './routes/index'
import { Route as SlugIndexRouteImport } from './routes/slug.index'

const SlugRoute = SlugRouteImport.update({
  id: '/slug',
  path: '/slug',
  getParentRoute: () => rootRouteImport,
} as any)
const ErrorRoute = ErrorRouteImport.update({
  id: '/error',
  path: '/error',
  getParentRoute: () => rootRouteImport,
} as any)
const CanvasRoute = CanvasRouteImport.update({
  id: '/canvas',
  path: '/canvas',
  getParentRoute: () => rootRouteImport,
} as any)
const BoardRoute = BoardRouteImport.update({
  id: '/board',
  path: '/board',
  getParentRoute: () => rootRouteImport,
} as any)
const ApiRoute = ApiRouteImport.update({
  id: '/api',
  path: '/api',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const SlugIndexRoute = SlugIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => SlugRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/api': typeof ApiRoute
  '/board': typeof BoardRoute
  '/canvas': typeof CanvasRoute
  '/error': typeof ErrorRoute
  '/slug': typeof SlugRouteWithChildren
  '/slug/': typeof SlugIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/api': typeof ApiRoute
  '/board': typeof BoardRoute
  '/canvas': typeof CanvasRoute
  '/error': typeof ErrorRoute
  '/slug': typeof SlugIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/api': typeof ApiRoute
  '/board': typeof BoardRoute
  '/canvas': typeof CanvasRoute
  '/error': typeof ErrorRoute
  '/slug': typeof SlugRouteWithChildren
  '/slug/': typeof SlugIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/api' | '/board' | '/canvas' | '/error' | '/slug' | '/slug/'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/api' | '/board' | '/canvas' | '/error' | '/slug'
  id:
    | '__root__'
    | '/'
    | '/api'
    | '/board'
    | '/canvas'
    | '/error'
    | '/slug'
    | '/slug/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  ApiRoute: typeof ApiRoute
  BoardRoute: typeof BoardRoute
  CanvasRoute: typeof CanvasRoute
  ErrorRoute: typeof ErrorRoute
  SlugRoute: typeof SlugRouteWithChildren
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/slug': {
      id: '/slug'
      path: '/slug'
      fullPath: '/slug'
      preLoaderRoute: typeof SlugRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/error': {
      id: '/error'
      path: '/error'
      fullPath: '/error'
      preLoaderRoute: typeof ErrorRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/canvas': {
      id: '/canvas'
      path: '/canvas'
      fullPath: '/canvas'
      preLoaderRoute: typeof CanvasRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/board': {
      id: '/board'
      path: '/board'
      fullPath: '/board'
      preLoaderRoute: typeof BoardRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/api': {
      id: '/api'
      path: '/api'
      fullPath: '/api'
      preLoaderRoute: typeof ApiRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/slug/': {
      id: '/slug/'
      path: '/'
      fullPath: '/slug/'
      preLoaderRoute: typeof SlugIndexRouteImport
      parentRoute: typeof SlugRoute
    }
  }
}

interface SlugRouteChildren {
  SlugIndexRoute: typeof SlugIndexRoute
}

const SlugRouteChildren: SlugRouteChildren = {
  SlugIndexRoute: SlugIndexRoute,
}

const SlugRouteWithChildren = SlugRoute._addFileChildren(SlugRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  ApiRoute: ApiRoute,
  BoardRoute: BoardRoute,
  CanvasRoute: CanvasRoute,
  ErrorRoute: ErrorRoute,
  SlugRoute: SlugRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

import type { getRouter } from './router.tsx'
import type { createStart } from '@tanstack/react-start'
declare module '@tanstack/react-start' {
  interface Register {
    ssr: true
    router: Awaited<ReturnType<typeof getRouter>>
  }
}
