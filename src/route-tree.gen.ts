/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as SelectRouteImport } from './routes/select'
import { Route as ErrorRouteImport } from './routes/error'
import { Route as DoneRouteImport } from './routes/done'
import { Route as CreateRouteImport } from './routes/create'
import { Route as ApiRouteImport } from './routes/api'
import { Route as IndexRouteImport } from './routes/index'

const SelectRoute = SelectRouteImport.update({
  id: '/select',
  path: '/select',
  getParentRoute: () => rootRouteImport,
} as any)
const ErrorRoute = ErrorRouteImport.update({
  id: '/error',
  path: '/error',
  getParentRoute: () => rootRouteImport,
} as any)
const DoneRoute = DoneRouteImport.update({
  id: '/done',
  path: '/done',
  getParentRoute: () => rootRouteImport,
} as any)
const CreateRoute = CreateRouteImport.update({
  id: '/create',
  path: '/create',
  getParentRoute: () => rootRouteImport,
} as any)
const ApiRoute = ApiRouteImport.update({
  id: '/api',
  path: '/api',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/api': typeof ApiRoute
  '/create': typeof CreateRoute
  '/done': typeof DoneRoute
  '/error': typeof ErrorRoute
  '/select': typeof SelectRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/api': typeof ApiRoute
  '/create': typeof CreateRoute
  '/done': typeof DoneRoute
  '/error': typeof ErrorRoute
  '/select': typeof SelectRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/api': typeof ApiRoute
  '/create': typeof CreateRoute
  '/done': typeof DoneRoute
  '/error': typeof ErrorRoute
  '/select': typeof SelectRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/api' | '/create' | '/done' | '/error' | '/select'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/api' | '/create' | '/done' | '/error' | '/select'
  id: '__root__' | '/' | '/api' | '/create' | '/done' | '/error' | '/select'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  ApiRoute: typeof ApiRoute
  CreateRoute: typeof CreateRoute
  DoneRoute: typeof DoneRoute
  ErrorRoute: typeof ErrorRoute
  SelectRoute: typeof SelectRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/select': {
      id: '/select'
      path: '/select'
      fullPath: '/select'
      preLoaderRoute: typeof SelectRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/error': {
      id: '/error'
      path: '/error'
      fullPath: '/error'
      preLoaderRoute: typeof ErrorRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/done': {
      id: '/done'
      path: '/done'
      fullPath: '/done'
      preLoaderRoute: typeof DoneRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/create': {
      id: '/create'
      path: '/create'
      fullPath: '/create'
      preLoaderRoute: typeof CreateRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/api': {
      id: '/api'
      path: '/api'
      fullPath: '/api'
      preLoaderRoute: typeof ApiRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  ApiRoute: ApiRoute,
  CreateRoute: CreateRoute,
  DoneRoute: DoneRoute,
  ErrorRoute: ErrorRoute,
  SelectRoute: SelectRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

import type { getRouter } from './router.tsx'
import type { createStart } from '@tanstack/react-start'
declare module '@tanstack/react-start' {
  interface Register {
    ssr: true
    router: Awaited<ReturnType<typeof getRouter>>
  }
}
